import logging
from typing import List, Dict, Any

import openai
from tenacity import retry, stop_after_attempt, wait_exponential, RetryError

from ..config import Settings
from ..storage.models import FeedbackCycle
from .google_sheets import GoogleSheetsService
from .employee_service import EmployeeService
from .question_service import QuestionnaireService

logger = logging.getLogger(__name__)

# Question IDs for open-ended questions to be summarized by AI
STRENGTHS_QUESTION_ID = "O-2"
WEAKNESSES_QUESTION_ID = "O-1"


class ReportService:
    def __init__(
        self,
        g_sheets_service: GoogleSheetsService,
        employee_service: EmployeeService,
        questionnaire_service: QuestionnaireService,
        config: Settings,
    ):
        self._g_sheets = g_sheets_service
        self._employees = employee_service
        self._questionnaire = questionnaire_service
        self._config = config
        self._openai_client = openai.AsyncOpenAI(
            api_key=config.openai.API_KEY,
            base_url=config.openai.API_BASE,
        )

    async def _get_answers_for_cycle(self, cycle: FeedbackCycle) -> List[Dict[str, Any]]:
        """Fetches all answer records for a given cycle from its Google Sheet."""
        sheet_title = cycle.sheet_title
        if not sheet_title:
            # Backward compatibility for old cycles without a stored sheet_title.
            logger.warning(f"Cycle {cycle.id} is missing a sheet_title. Generating it based on old logic.")
            target_employee = self._employees.find_by_id(cycle.target_employee_id)
            if not target_employee:
                logger.error(f"Cannot get answers: target employee {cycle.target_employee_id} not found.")
                return []
            
            # This is the original logic from cycle_service.py
            timestamp_part = '_'.join(cycle.id.split('_')[:2])
            sheet_title = f"{timestamp_part}_{target_employee.full_name}"

        try:
            records = await self._g_sheets.get_all_records(sheet_title)
            return records
        except Exception as e:
            logger.error(f"Failed to get records from sheet '{sheet_title}': {e}")
            return []

    async def _get_employee_full_name(self, employee_id: str) -> str:
        target_employee = self._employees.find_by_id(employee_id)
        if not target_employee:
            logger.error(f"Cannot get employee for report: {employee_id} not found.")
            return ""
        return target_employee.full_name

    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=2, max=10))
    async def _summarize_with_ai(self, texts: List[str], target_name: str) -> str:
        """Generates a full report based on a list of texts using the OpenAI API."""
        if not texts:
            return "–û—Ç–≤–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        filtered_texts = [text for text in texts if text and len(text.strip()) > 10]
        if not filtered_texts:
            return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."

        content = "\n".join(f"- {text}" for text in filtered_texts)
        prompt = (
            f"—Ç—ã ‚Äî hr-–∞–Ω–∞–ª–∏—Ç–∏–∫ dodo brands.\n"
            f"–∑–∞–¥–∞—á–∞: –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö 360-–æ—Ç–≤–µ—Ç–æ–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {target_name}.\n\n"
            f"–∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
            f"1. —Ç–µ–º–∞ –æ–ø—Ä–æ—Å–∞: ¬´—Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –∑–æ–Ω—ã —Ä–æ—Å—Ç–∞¬ª.\n"
            f"2. –Ω–∏–∂–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã —Å—ã—Ä–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –∫–æ–ª–ª–µ–≥.\n"
            f"3. –∏—Å–ø–æ–ª—å–∑—É–π **—Ç–æ—á–Ω–æ —Ç–∞–∫—É—é –∂–µ** —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ ¬´sample report¬ª (—Å–º–æ—Ç—Ä–∏ –¥–∞–ª—å—à–µ).\n\n"
            f"–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n"
            f"- –Ω–µ —É–∫–∞–∑—ã–≤–∞–π –∏–º–µ–Ω–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤;\n"
            f"- –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã —Å–≤–µ—Ä—Ö —Ç–µ–∫—Å—Ç–∞;\n"
            f"- —Å—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –±–µ–∑ –≤–æ–¥—ã, —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã;\n"
            f"- –æ–±—â–∏–π –æ–±—ä—ë–º –≥–æ—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞ ‚â§ 400 —Å–ª–æ–≤;\n"
            f"- –≤—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ markdown-–±–ª–æ–∫–µ.\n\n"
            f"---\n"
            f"### sample report (–æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏)\n\n"
            f"**–∫—Ä–∞—Ç–∫–æ–µ summary**\n"
            f"–∫–æ–ª–ª–µ–≥–∏ —Ü–µ–Ω—è—Ç, —á—Ç–æ –∞–Ω–Ω–∞ –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ—à–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –¥–µ—Ä–∂–∏—Ç –≤—ã—Å–æ–∫–∏–π —Ç–µ–º–ø. –ø—Ä–∏ —ç—Ç–æ–º –æ–∂–∏–¥–∞—é—Ç –±–æ–ª—å—à–µ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–º –≤–∏–¥–µ–Ω–∏–∏.\n\n"
            f"**—Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã**\n"
            f"- üöÄ —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –∏ –∑–∞–ø—É—Å–∫–æ–≤\n"
            f"- ü§ù –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –ø–æ–º–æ—â–∏ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏\n"
            f"- üéØ —Ñ–æ–∫—É—Å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –Ω–µ –ø—Ä–æ—Ü–µ—Å—Å\n\n"
            f"**–∑–æ–Ω—ã —Ä–æ—Å—Ç–∞**\n"
            f"- —Ä–∞–∑–≤–∏–≤–∞–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å —Å–µ–±—è\n"
            f"- —Ä–∞–∑–≤–∏–≤–∞–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 3‚Äì6 –º–µ—Å., –∞ –Ω–µ ¬´–∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å¬ª\n"
            f"- —Ä–∞–∑–≤–∏–≤–∞–π –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–¥–µ–π\n\n"
            f"**—Ü–∏—Ç–∞—Ç—ã –∫–æ–ª–ª–µ–≥**\n"
            f"> ¬´–µ—Å–ª–∏ –Ω–∞–¥–æ ‚Äú–ø–æ–∂–∞—Ä‚Äù ‚Äî –∞–Ω–Ω–∞ –ø–µ—Ä–≤–∞—è –Ω–∞ –º–µ—Å—Ç–µ¬ª\n"
            f"> ¬´–∏–Ω–æ–≥–¥–∞ –±–µ—Ä—ë—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–∞ —Å–µ–±—è¬ª\n"
            f"> ¬´–∫–ª—ë–≤–æ, —á—Ç–æ –≤—Å–µ–≥–¥–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ –¥–µ–ª—É¬ª\n\n"
            f"**–ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π 30-60-90**\n"
            f"- **30 –¥–Ω–µ–π:** –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á\n"
            f"- **60 –¥–Ω–µ–π:** –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–æ—Ä–∫—à–æ–ø —Å –∫–æ–º–∞–Ω–¥–æ–π –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å roadmap –Ω–∞ Q3\n"
            f"- **90 –¥–Ω–µ–π:** –æ—Ç—Å–ª–µ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ roadmap –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª–∏\n\n"
            f"---\n"
            f"### –æ—Ç–∑—ã–≤—ã\n"
            f"{content}"
        )

        response = await self._openai_client.chat.completions.create(
            model="gpt-4-turbo-preview",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
            max_tokens=800,
        )
        return response.choices[0].message.content.strip()

    async def generate_report_for_cycle(self, cycle: FeedbackCycle) -> str:
        """Generates a full summary report for a completed feedback cycle."""
        target_employee_name = await self._get_employee_full_name(cycle.target_employee_id)
        report_header = (
            f"<b>–û—Ç—á–µ—Ç –ø–æ —Ü–∏–∫–ª—É 360¬∞ –¥–ª—è {target_employee_name}</b>\n"
            f"ID —Ü–∏–∫–ª–∞: <code>{cycle.id}</code>\n"
        )

        all_answers = await self._get_answers_for_cycle(cycle)
        if not all_answers:
            return f"{report_header}\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –∏–∑ Google Sheets."

        all_questions = await self._questionnaire.get_questionnaire()
        question_map = {q.id: q for q in all_questions}

        strengths_col = question_map.get(STRENGTHS_QUESTION_ID).result_column
        weaknesses_col = question_map.get(WEAKNESSES_QUESTION_ID).result_column

        strengths_texts = [str(ans[strengths_col]) for ans in all_answers if strengths_col in ans and ans[strengths_col]]
        weaknesses_texts = [str(ans[weaknesses_col]) for ans in all_answers if weaknesses_col in ans and ans[weaknesses_col]]

        all_feedback_texts = strengths_texts + weaknesses_texts

        try:
            ai_summary = await self._summarize_with_ai(all_feedback_texts, target_employee_name)
        except RetryError as e:
            logger.error(f"Failed to get AI summary after multiple retries: {e}")
            ai_summary = "<i>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI-–æ—Ç—á–µ—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ API.</i>"

        # TODO: Add calculation of average scores for competency questions
        # TODO: Add list of non-respondents

        report_body = f"\n{ai_summary}\n"

        return report_header + report_body
